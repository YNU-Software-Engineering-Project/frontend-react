on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: Demo CI on ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_ECR_REGION }} | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: public.ecr.aws
          ECR_REPOSITORY: ${{ secrets.ECR_PUB_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push the image with the specific tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Tag the image with 'latest' and push
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to ECS
        env:
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: latest
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region $AWS_REGION

      - name: Cleanup old images
        run: |
          images=$(aws ecr-public describe-images --repository-name ${{ secrets.ECR_PUB_REPO_NAME }} --region ${{ secrets.AWS_ECR_REGION }} --output json | jq -r '.imageDetails | sort_by(.imagePushedAt) | .[:-2] | .[].imageDigest')
          if [ -z "$images" ]; then
            echo "No images found for deletion."
          else
            echo "Images to be deleted: $images"
            for image in $images; do
              aws ecr-public batch-delete-image --repository-name ${{ secrets.ECR_PUB_REPO_NAME }} --image-ids imageDigest=$image --region ${{ secrets.AWS_ECR_REGION }}
            done
          fi

