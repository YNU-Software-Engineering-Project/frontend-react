on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: Demo CI on ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecr-test
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push the image with the unique tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Tag the image as 'latest' and push
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Cleanup old images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecr-test
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Get the list of image digests, sorted by time, excluding the latest two
          images=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --region $AWS_REGION --output json | jq -r '.imageDetails | sort_by(.imagePushedAt) | .[:-2] | .[].imageDigest')

          if [ -z "$images" ]; then
            echo "No images found for deletion."
          else
            echo "Images to be deleted: $images"
            for image in $images; do
              aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$image --region $AWS_REGION
            done
          fi
